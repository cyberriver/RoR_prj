=begin
Класс Station (Станция):

    Имеет название, которое указывается при ее создании
    Может принимать поезда (по одному за раз)
    Может возвращать список всех поездов на станции, находящиеся в текущий момент
    Может возвращать список поездов на станции по типу (см. ниже): кол-во грузовых, пассажирских
    Может отправлять поезда (по одному за раз, при этом, поезд удаляется из списка поездов, находящихся на станции).


Класс Route (Маршрут):

    Имеет начальную и конечную станцию, а также список промежуточных станций. Начальная и конечная станции указываютсся при создании маршрута, а промежуточные могут добавляться между ними.
    Может добавлять промежуточную станцию в список
    Может удалять промежуточную станцию из списка
    Может выводить список всех станций по-порядку от начальной до конечной


Класс Train (Поезд):

    Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов, эти данные указываются при создании экземпляра класса
    Может набирать скорость
    Может возвращать текущую скорость
    Может тормозить (сбрасывать скорость до нуля)
    Может возвращать количество вагонов
    Может прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется.
    Может принимать маршрут следования (объект класса Route).
    При назначении маршрута поезду, поезд автоматически помещается на первую станцию в маршруте.
    Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
    Возвращать предыдущую станцию, текущую, следующую, на основе маршрута
=end

class Station #
  @@station_count = 0
  @@stations = Hash.new(0) #все станции
  @arrived_trains = Hash.new(0) #прибывшие поезда

  def initialize (station_name) #создание станции
    @station_name = station_name
    @@stations[@station_name]="поездов нет" #создаем конкретную станцию
    @arrived_trains = {}
    @@station_count +=1
    puts "log: создана станция #{@station_name}"
    puts @@stations
  end

  def self.number_of_station #подсчет количества станций
    @@station_count #сколько мы создали станций
  end

  def display_all #посмотреть все станции со всеми поездами
    puts "список всех станций"
    @@stations.each do |key,value|
      puts "стация #{key}"
    end
  end

  def arrival (train_num, train_type) #прибытие поезда на станцию
    @train_num = train_num
    @train_type = train_type.to_s
    @arrived_trains[@train_num] = @train_type
    @@stations[@station_name] = @arrived_trains
    puts "log: на станцию #{@station_name} прибыл поезд #{@train_num}"
    #проверяем что поезда приехали на станцию

  end


  def display #показать все поезда на станции
      if @arrived_trains.nil?
        puts "На станции нет поездов"
      else
      puts "log: На стации  #{@station_name} стоят следующие поезда:"
      @arrived_trains.each do  |key,value|
        puts "поезд № #{key}, тип поезда #{value}"
        end
      end
  end

  def count_train #посчиать количество поездов по типам
    @count_train = [] # массив с типами поездов
    @total_train = Hash.new(0)  # итоговый хеш с результатами подсчетов
    i=0

    @arrived_trains.each do |key,value| #каждый тип поезда помещаем в массив для подсчета
      @count_train[i] =value
      i +=1
    end
    puts "список поездов на станции #{@station_name} по типам"
    @count_train.each do |value|
      @total_train[value] +=1
    end
    @total_train.each do |key,value|
      puts "тип: #{key}, количество поездов: #{value}"
    end

  end
  def departure (train_num)
    @arrived_trains.delete(train_num)
    puts "поезд №#{train_num} покинул станцию #{@station_name}"

  end

end
